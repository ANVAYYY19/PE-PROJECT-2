
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>FOOTY SCOUTS</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <style>
    body {
      background: url("grass.webp") no-repeat center center fixed;
      background-size: cover;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      position: relative;
    }
    .form-container {
      background: white;
      padding: 2rem;
      border-radius: 20px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      position: relative;
      z-index: 10;
      width: 100%;
      max-width: 700px;
    }
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.2);
      border-top: 4px solid #facc15;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .gradient-text {
      background: linear-gradient(270deg, #facc15, #ff7eb3, #ffcc00, #a78bfa, #6a11cb, #ff5733, #34d399);
      background-size: 1200% 1200%;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      animation: gradientShift 20s ease infinite;
    }
    @keyframes gradientShift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    textarea:focus {
      outline: none;
      border-color: #60a5fa;
    }
    #results:empty {
      display: none;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-top: 1rem;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 0.75rem;
      text-align: left;
    }
    th {
      background-color: #f3f4f6;
    }
    .highlight-section {
      margin-top: 1rem;
      padding-left: 1rem;
    }
    .footer {
      margin-top: 3rem;
      font-size: 0.9rem;
      text-align: center;
      color: #4b5563;
    }
  </style>
</head>
<body class="text-gray-900 font-sans min-h-screen flex items-center justify-center">
  <div class="form-container">
    <h1 class="text-5xl font-extrabold text-center mb-4 gradient-text">FOOTY SCOUTS</h1>
    <p class="text-center text-gray-700 text-lg mb-8">Uncover elite football talent with data-driven insights and advanced stats.</p>

    <textarea id="prompt" class="w-full p-6 rounded-2xl text-black mb-6 border-2 border-blue-400 text-lg" rows="5" placeholder="e.g. 10 creative midfielders under 24 from South America"></textarea>

    <button id="generateBtn" class="w-full bg-blue-500 hover:bg-blue-600 py-4 rounded-2xl text-white text-lg font-semibold transition duration-200">Scout</button>

    <div id="loading" class="mt-10 hidden text-center">
      <div class="spinner"></div>
      <p class="mt-3 text-base text-gray-700">Analyzing player stats and critic reviews...</p>
    </div>

    <div id="results" class="mt-10 bg-gray-100 p-5 rounded-lg shadow-md text-black prose prose-sm max-w-none"></div>

    <div class="footer">
      Made by Anvay Thite Â· Powered by OpenRouter + Gemini
    </div>
  </div>

  <script>
    const button = document.getElementById('generateBtn');
    const loading = document.getElementById('loading');
    const promptInput = document.getElementById('prompt');
    const resultsDiv = document.getElementById('results');

    const API_KEY = "MY_API_KEY"; // Replace with your actual OpenRouter API key

    function escapeHTML(str) {
      return str.replace(/[&<>'"]/g, tag => {
        const chars = { '&': '&amp;', '<': '&lt;', '>': '&gt;', "'": '&#39;', '"': '&quot;' };
        return chars[tag] || tag;
      });
    }

    function formatMarkdown(md) {
      return md
        .replace(/^###\s(.+)/gm, '<h3 class="text-xl font-bold mt-4">$1</h3>')
        .replace(/^##\s(.+)/gm, '<h2 class="text-2xl font-bold mt-6">$1</h2>')
        .replace(/\*\*(.+?)\*\*/gm, '<strong>$1</strong>')
        .replace(/^\*\s(.+)/gm, '<li>$1</li>')
        .replace(/\n\n/g, '</p><p>')
        .replace(/^>\s(.+)/gm, '<blockquote class="border-l-4 pl-4 italic text-gray-600">$1</blockquote>')
        .replace(/`([^`]+)`/g, '<code class="bg-gray-200 px-1 rounded">$1</code>');
    }

    button.addEventListener('click', async () => {
      const userPrompt = promptInput.value.trim();
      if (!userPrompt) return alert("Please enter a scouting query!");

      loading.classList.remove('hidden');
      resultsDiv.innerHTML = "";

      try {
        const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${API_KEY}`
          },
          body: JSON.stringify({
            model: "google/gemini-pro",
            messages: [
              { role: "system", content: "You are a helpful assistant that returns football scouting reports based on prompts. Structure the results as a clear scouting report with headings, bullet points, and player details." },
              { role: "user", content: `Prompt: ${userPrompt}` }
            ],
            max_tokens: 800
          }),
        });

        const data = await response.json();
        if (!response.ok || !data.choices || !data.choices.length) throw new Error(data.error?.message || "API request failed");

        const aiResponse = data.choices[0]?.message?.content || "No relevant players found.";
        const formattedResponse = formatMarkdown(aiResponse);

        const safePrompt = escapeHTML(userPrompt);
        const safeResponse = escapeHTML(aiResponse);

        resultsDiv.innerHTML = `<p class='mt-4 border-t pt-4'><strong>Prompt:</strong> ${safePrompt}</p><div class='mt-4'>${formattedResponse}</div>`;
        resultsDiv.classList.remove('hidden');
      } catch (error) {
        console.error("Error fetching AI response:", error);
        alert("Failed to fetch player data. Try again later!\n" + error.message);
      }

      loading.classList.add('hidden');
    });
  </script>
</body>
</html>
